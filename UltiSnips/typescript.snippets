global !p
def upperfirst(t):
	if len(t) < 2:
		return '' if len(t) < 1 else t.capitalize()
	return t[0].capitalize() + t[1:]
def lowerdash(t):
	return '-'.join([ w.lower() for w in re.findall('[a-z]+|[A-Z]+[a-z]*', t) ])
endglobal

# Normal javascript snippets

snippet log "console.log" b
console.log($1)
endsnippet

snippet switch "switch" b
switch ($1) {
		case value:

			break;

		default:
			break;
}
endsnippet

#Hooks React
snippet useS "useState Hook"  b
const [$1, set$3`!p snip.rv=upperfirst(t[1])`] = useState($2)
endsnippet

snippet useE "useEffect Hook"  b
useEffect(() => {
	$0
	return () => {

	}
}, [$1])
endsnippet

snippet useC "useContext Hook" b
const ${1:context} = useContext($2)
endsnippet

snippet createContext "React Custom Context" b
import { createContext } from "react";

//Este es el estado del contexto no es el estado inicial

interface ContextProps {
	${2:prop1}: ${3:type};
}

export const ${1:Name}Context = createContext({} as ContextProps);
endsnippet

snippet reactProvider "React Custom Provider" b 
import { FC, useReducer } from "react";
import { ${1:Name}Context, ${3:uiReducer}} from "./";

export interface $1State {
	${2:Prop}: boolean;
}

const $1_INITIAL_STATE: $1State = {
	$2: -> value,
};

interface Props {
	children: React.ReactNode
}

export const $1Provider: FC<Props> = ({ children }) => {
	const [state, dispatch] = useReducer( uiReducer , $1_INITIAL_STATE)
	return (
		<$1Context.Provider value={{ ...state }}>
			{children}
		</$1Context.Provider>
	);
};
endsnippet


snippet useRed "useReducer(reducer, initialState, getInitialState) Hook" b
const [${1:state}, ${2:dispatch}] = useReducer( reducer, state, INIT)
endsnippet

snippet useCB "useCallback(fn, inputs)" b
const ${1:callback} = useCallback(($2) => ${3:{
	$4
}}, [$5])
endsnippet

snippet useM "useMemo Hook" b
const ${1:memoized} = useMemo(() => ${2:{
	$3
}}, [$4])
endsnippet

snippet useR "useRef Hook" b
const ${1:ref} = useRef(${2:null})
endsnippet

snippet useI "useImperitiveHandle Hook" b
useImperitiveHandle(${1:ref}, ${4:() => ({
	$2
})}, ${5:[$3]})
endsnippet

snippet useL "useLayoutEffect Hook" b
useLayoutEffect(() => {
	$0
}, [$1])
endsnippet

#React Snippets

snippet rafc "React Arrow Function Component" b
import React from 'react'

export const ${1:`!v expand('%:t:r')`} = ():JSX.Element => {
	return (
		<div>$0</div>
	)
}
endsnippet


snippet rafce "React Arrow Function Component Export" b
import React from 'react'

const ${1:`!v expand('%:t:r')`} = ():JSX.Element  => {
	return (
		<div>$0</div>
	)
}

export default $1 
endsnippet



snippet hoc "HOC" b
import React from 'react'
import PropTypes from 'prop-types'

export default (WrappedComponent) => {
	const hocComponent = ({ ...props }) => <WrappedComponent {...props} />

	hocComponent.propTypes = {}

	return hocComponent
}
endsnippet


#Redux
snippet useD "useDispatch" b
const dispatch = useDispatch()
endsnippet

snippet useSL "useSelector(selector)" b
const ${1:value} = useSelector(${2:state => $3})
endsnippet


#React Native

snippet stles "Styles React Native" b
const styles = StyleSheet.create({
	${1}
})
endsnippet


#Next JS

snippet nextdocument "Document Next Component" b
import Document, {DocumentContext, Html, Head, Main, NextScript} from 'next/document'

class MyDocument extends Document {
	static async getInitialProps(ctx:DocumentContext){
		const initialProps = await Document.getInitialProps(ctx)
		return initialProps
	}

	render(){
		return (
				<Html>
					<Head>

					</Head>
					<body>
							<Main />
							<NextScript />
					</body>
				</Html>
		)
	}
}

export default MyDocument
endsnippet


snippet nextapi "Next API Routes" b
import type { NextApiRequest, NextApiResponse } from "next";

type Data = {
	name:string;
};

export default function handler(req: NextApiRequest, res: NextApiResponse<Data>) {
	res.status(200).json({
		name:"Example"
	});
}
endsnippet
