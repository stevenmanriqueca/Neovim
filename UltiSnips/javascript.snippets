global !p
def upperfirst(t):
	if len(t) < 2:
		return '' if len(t) < 1 else t.capitalize()
	return t[0].capitalize() + t[1:]
def lowerdash(t):
	return '-'.join([ w.lower() for w in re.findall('[a-z]+|[A-Z]+[a-z]*', t) ])
endglobal

# Normal javascript snippets

snippet log "console.log" b
console.log($1)
endsnippet

snippet switch "switch" b
switch ($1) {
		case value:

			break;

		default:
			break;
}
endsnippet

snippet try "try catch finally" b
	try{

		}catch(err){

		}
	finally{

	}
endsnippet

#Hooks React
snippet useS "useState Hook"  b
const [$1, set$3`!p snip.rv=upperfirst(t[1])`] = useState($2)
endsnippet

snippet useE "useEffect Hook"  b
useEffect(() => {
	$0
	return () => {

	}
}, [$1])
endsnippet

snippet useC "useContext Hook" b
const ${1:context} = useContext($2)
endsnippet

snippet useRed "useReducer(reducer, initialState, getInitialState) Hook" b
const [${1:state}, ${2:dispatch}] = useReducer( reducer, state, INIT)
endsnippet

snippet useCB "useCallback(fn, inputs)" b
const ${1:callback} = useCallback(($2) => ${3:{
	$4
}}, [$5])
endsnippet

snippet useM "useMemo Hook" b
const ${1:memoized} = useMemo(() => ${2:{
	$3
}}, [$4])
endsnippet

snippet useR "useRef Hook" b
const ${1:ref} = useRef(${2:null})
endsnippet

snippet useI "useImperitiveHandle Hook" b
useImperitiveHandle(${1:ref}, ${4:() => ({
	$2
})}, ${5:[$3]})
endsnippet

snippet useL "useLayoutEffect Hook" b
useLayoutEffect(() => {
	$0
}, [$1])
endsnippet

#React Snippets

snippet rafc "React Arrow Function Component" b
import React from 'react'

export const ${1:`!v expand('%:t:r')`} = () => {
	return (
		<div>$0</div>
	)
}
endsnippet


snippet rafce "React Arrow Function Component Export" b
import React from 'react'

const ${1:`!v expand('%:t:r')`} = () => {
	return (
		<div>$0</div>
	)
}

export default ${1:`!v expand('%:t:r')`}
endsnippet



snippet rafcp "React Arrow Function Component PropTypes" b
import React from 'react'
import PropTypes from 'prop-types'

const ${1:`!v expand('%:t:r')`} = () => {
	return (
		<div>$0</div>
	)
}

$1.propTypes = {}

export default $1
endsnippet

snippet hoc "HOC" b
import React from 'react'
import PropTypes from 'prop-types'

export default (WrappedComponent) => {
	const hocComponent = ({ ...props }) => <WrappedComponent {...props} />

	hocComponent.propTypes = {}

	return hocComponent
}
endsnippet


#Redux
snippet useD "useDispatch" b
const dispatch = useDispatch()
endsnippet

snippet useSL "useSelector(selector)" b
const ${1:value} = useSelector(${2:state => $3})
endsnippet

#React Native

snippet stles "Styles React Native" b
const styles = StyleSheet.create({
	${1}
})
endsnippet


#Testing Jest
snippet desc "describe Test" b
describe("$1", () => {

})
endsnippet

snippet test "test basic structure" b
test("${1}", () => {

})
endsnippet
